# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _difftest
else:
    import _difftest

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_SwigPyIterator

    def value(self):
        return _difftest.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _difftest.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _difftest.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _difftest.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _difftest.SwigPyIterator_equal(self, x)

    def copy(self):
        return _difftest.SwigPyIterator_copy(self)

    def next(self):
        return _difftest.SwigPyIterator_next(self)

    def __next__(self):
        return _difftest.SwigPyIterator___next__(self)

    def previous(self):
        return _difftest.SwigPyIterator_previous(self)

    def advance(self, n):
        return _difftest.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _difftest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _difftest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _difftest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _difftest.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _difftest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _difftest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _difftest:
_difftest.SwigPyIterator_swigregister(SwigPyIterator)
DEBUG_GROUP_TRACE_SIZE = _difftest.DEBUG_GROUP_TRACE_SIZE
DEBUG_INST_TRACE_SIZE = _difftest.DEBUG_INST_TRACE_SIZE
EX_IAM = _difftest.EX_IAM
EX_IAF = _difftest.EX_IAF
EX_II = _difftest.EX_II
EX_BP = _difftest.EX_BP
EX_LAM = _difftest.EX_LAM
EX_LAF = _difftest.EX_LAF
EX_SAM = _difftest.EX_SAM
EX_SAF = _difftest.EX_SAF
EX_ECU = _difftest.EX_ECU
EX_ECS = _difftest.EX_ECS
EX_ECVS = _difftest.EX_ECVS
EX_ECM = _difftest.EX_ECM
EX_IPF = _difftest.EX_IPF
EX_LPF = _difftest.EX_LPF
EX_RS0 = _difftest.EX_RS0
EX_SPF = _difftest.EX_SPF
EX_DT = _difftest.EX_DT
EX_RS1 = _difftest.EX_RS1
EX_SWC = _difftest.EX_SWC
EX_HWE = _difftest.EX_HWE
EX_IGPF = _difftest.EX_IGPF
EX_LGPF = _difftest.EX_LGPF
EX_VI = _difftest.EX_VI
EX_SGPF = _difftest.EX_SGPF
ICACHEID = _difftest.ICACHEID
DCACHEID = _difftest.DCACHEID
PAGECACHEID = _difftest.PAGECACHEID
ITLBID = _difftest.ITLBID
LDTLBID = _difftest.LDTLBID
STTLBID = _difftest.STTLBID
PAGE_SHIFT = _difftest.PAGE_SHIFT
PAGE_SIZE = _difftest.PAGE_SIZE
PAGE_MASK = _difftest.PAGE_MASK
RET_NORMAL = _difftest.RET_NORMAL
RET_INT = _difftest.RET_INT
RET_EXC = _difftest.RET_EXC
RET_OTHER = _difftest.RET_OTHER
RET_LOAD = _difftest.RET_LOAD
RET_STORE = _difftest.RET_STORE
class store_event_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    addr = property(_difftest.store_event_t_addr_get, _difftest.store_event_t_addr_set)
    data = property(_difftest.store_event_t_data_get, _difftest.store_event_t_data_set)
    mask = property(_difftest.store_event_t_mask_get, _difftest.store_event_t_mask_set)

    def __init__(self):
        _difftest.store_event_t_swiginit(self, _difftest.new_store_event_t())
    __swig_destroy__ = _difftest.delete_store_event_t

# Register store_event_t in _difftest:
_difftest.store_event_t_swigregister(store_event_t)
class CommitTrace(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    pc = property(_difftest.CommitTrace_pc_get, _difftest.CommitTrace_pc_set)
    inst = property(_difftest.CommitTrace_inst_get, _difftest.CommitTrace_inst_set)
    __swig_destroy__ = _difftest.delete_CommitTrace

    def get_type(self):
        return _difftest.CommitTrace_get_type(self)

    def display(self, use_spike=False):
        return _difftest.CommitTrace_display(self, use_spike)

    def display_line(self, index, use_spike, is_retire):
        return _difftest.CommitTrace_display_line(self, index, use_spike, is_retire)

# Register CommitTrace in _difftest:
_difftest.CommitTrace_swigregister(CommitTrace)
class InstrTrace(CommitTrace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wen = property(_difftest.InstrTrace_wen_get, _difftest.InstrTrace_wen_set)
    dest = property(_difftest.InstrTrace_dest_get, _difftest.InstrTrace_dest_set)
    data = property(_difftest.InstrTrace_data_get, _difftest.InstrTrace_data_set)
    tag = property(_difftest.InstrTrace_tag_get, _difftest.InstrTrace_tag_set)
    robidx = property(_difftest.InstrTrace_robidx_get, _difftest.InstrTrace_robidx_set)
    isLoad = property(_difftest.InstrTrace_isLoad_get, _difftest.InstrTrace_isLoad_set)
    lqidx = property(_difftest.InstrTrace_lqidx_get, _difftest.InstrTrace_lqidx_set)
    isStore = property(_difftest.InstrTrace_isStore_get, _difftest.InstrTrace_isStore_set)
    sqidx = property(_difftest.InstrTrace_sqidx_get, _difftest.InstrTrace_sqidx_set)

    def __init__(self, pc, inst, wen, dest, data, lqidx, sqidx, robidx, isLoad, isStore, skip=False, delayed=False):
        _difftest.InstrTrace_swiginit(self, _difftest.new_InstrTrace(pc, inst, wen, dest, data, lqidx, sqidx, robidx, isLoad, isStore, skip, delayed))

    def get_type(self):
        return _difftest.InstrTrace_get_type(self)
    __swig_destroy__ = _difftest.delete_InstrTrace

# Register InstrTrace in _difftest:
_difftest.InstrTrace_swigregister(InstrTrace)
class ExceptionTrace(CommitTrace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cause = property(_difftest.ExceptionTrace_cause_get, _difftest.ExceptionTrace_cause_set)

    def __init__(self, pc, inst, cause):
        _difftest.ExceptionTrace_swiginit(self, _difftest.new_ExceptionTrace(pc, inst, cause))

    def get_type(self):
        return _difftest.ExceptionTrace_get_type(self)
    __swig_destroy__ = _difftest.delete_ExceptionTrace

# Register ExceptionTrace in _difftest:
_difftest.ExceptionTrace_swigregister(ExceptionTrace)
class InterruptTrace(ExceptionTrace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pc, inst, cause):
        _difftest.InterruptTrace_swiginit(self, _difftest.new_InterruptTrace(pc, inst, cause))

    def get_type(self):
        return _difftest.InterruptTrace_get_type(self)
    __swig_destroy__ = _difftest.delete_InterruptTrace

# Register InterruptTrace in _difftest:
_difftest.InterruptTrace_swigregister(InterruptTrace)
class DiffState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dump_commit_trace = property(_difftest.DiffState_dump_commit_trace_get, _difftest.DiffState_dump_commit_trace_set)

    def __init__(self):
        _difftest.DiffState_swiginit(self, _difftest.new_DiffState())

    def record_group(self, pc, count):
        return _difftest.DiffState_record_group(self, pc, count)

    def record_inst(self, pc, inst, en, dest, data, skip, delayed, lqidx, sqidx, robidx, isLoad, isStore):
        return _difftest.DiffState_record_inst(self, pc, inst, en, dest, data, skip, delayed, lqidx, sqidx, robidx, isLoad, isStore)

    def record_exception(self, pc, inst, cause):
        return _difftest.DiffState_record_exception(self, pc, inst, cause)

    def record_interrupt(self, pc, inst, cause):
        return _difftest.DiffState_record_interrupt(self, pc, inst, cause)

    def display(self, coreid):
        return _difftest.DiffState_display(self, coreid)
    __swig_destroy__ = _difftest.delete_DiffState

# Register DiffState in _difftest:
_difftest.DiffState_swigregister(DiffState)
class Difftest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dut = property(_difftest.Difftest_dut_get, _difftest.Difftest_dut_set)

    def __init__(self, coreid):
        _difftest.Difftest_swiginit(self, _difftest.new_Difftest(coreid))
    __swig_destroy__ = _difftest.delete_Difftest
    proxy = property(_difftest.Difftest_proxy_get, _difftest.Difftest_proxy_set)
    num_commit = property(_difftest.Difftest_num_commit_get, _difftest.Difftest_num_commit_set)
    has_commit = property(_difftest.Difftest_has_commit_get, _difftest.Difftest_has_commit_set)

    def step(self):
        return _difftest.Difftest_step(self)

    def update_nemuproxy(self, arg2, arg3):
        return _difftest.Difftest_update_nemuproxy(self, arg2, arg3)

    def get_trap_valid(self):
        return _difftest.Difftest_get_trap_valid(self)

    def get_trap_code(self):
        return _difftest.Difftest_get_trap_code(self)

    def display(self):
        return _difftest.Difftest_display(self)

    def display_stats(self):
        return _difftest.Difftest_display_stats(self)

    def set_trace(self, name, is_read):
        return _difftest.Difftest_set_trace(self, name, is_read)

    def trace_read(self):
        return _difftest.Difftest_trace_read(self)

    def trace_write(self, step):
        return _difftest.Difftest_trace_write(self, step)

    def get_trap_event(self):
        return _difftest.Difftest_get_trap_event(self)

    def arch_reg(self, src, is_fp=False):
        return _difftest.Difftest_arch_reg(self, src, is_fp)

    def get_dut(self):
        return _difftest.Difftest_get_dut(self)

    def set_commit_trace(self, enable):
        return _difftest.Difftest_set_commit_trace(self, enable)
    stuck_limit = _difftest.Difftest_stuck_limit

# Register Difftest in _difftest:
_difftest.Difftest_swigregister(Difftest)

def difftest_init():
    return _difftest.difftest_init()

def difftest_nstep(step, enable_diff):
    return _difftest.difftest_nstep(step, enable_diff)

def difftest_switch_zone():
    return _difftest.difftest_switch_zone()

def difftest_set_dut():
    return _difftest.difftest_set_dut()

def difftest_step():
    return _difftest.difftest_step()

def difftest_state():
    return _difftest.difftest_state()

def difftest_finish():
    return _difftest.difftest_finish()

def difftest_trace_read():
    return _difftest.difftest_trace_read()

def difftest_trace_write(step):
    return _difftest.difftest_trace_write(step)

def init_nemuproxy(arg1):
    return _difftest.init_nemuproxy(arg1)

def GetDifftest(index):
    return _difftest.GetDifftest(index)

def InitRam(image, n_bytes):
    return _difftest.InitRam(image, n_bytes)

def InitFlash(flash_bin):
    return _difftest.InitFlash(flash_bin)

def GetFlash():
    return _difftest.GetFlash()

def FlashRead(addr):
    return _difftest.FlashRead(addr)

def FlashWrite(addr, data):
    return _difftest.FlashWrite(addr, data)

def DifftestStepAndCheck(pin, val, arg):
    return _difftest.DifftestStepAndCheck(pin, val, arg)

def GetFuncAddressOfDifftestStepAndCheck():
    return _difftest.GetFuncAddressOfDifftestStepAndCheck()

def GetDifftestStat():
    return _difftest.GetDifftestStat()

def GoldenMemInit():
    return _difftest.GoldenMemInit()

def GoldenMemFinish():
    return _difftest.GoldenMemFinish()

def NemuProxyInit(size):
    return _difftest.NemuProxyInit(size)

def SetProxyRefSo(addr):
    return _difftest.SetProxyRefSo(addr)

def GetProxyRefSo():
    return _difftest.GetProxyRefSo()
DEFAULT_EMU_RAM_SIZE = _difftest.DEFAULT_EMU_RAM_SIZE

def pmem_read(raddr):
    return _difftest.pmem_read(raddr)

def pmem_write(waddr, wdata):
    return _difftest.pmem_write(waddr, wdata)

def difftest_ram_read(rIdx):
    return _difftest.difftest_ram_read(rIdx)

def difftest_ram_write(wIdx, wdata, wmask):
    return _difftest.difftest_ram_write(wIdx, wdata, wmask)
class InputReader(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_InputReader

    def len(self):
        return _difftest.InputReader_len(self)

    def next(self):
        return _difftest.InputReader_next(self)

    def read_all(self, arg2, arg3):
        return _difftest.InputReader_read_all(self, arg2, arg3)

# Register InputReader in _difftest:
_difftest.InputReader_swigregister(InputReader)
cvar = _difftest.cvar

class StdinReader(InputReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _difftest.StdinReader_swiginit(self, _difftest.new_StdinReader())
    __swig_destroy__ = _difftest.delete_StdinReader

    def next(self):
        return _difftest.StdinReader_next(self)

    def read_all(self, *args):
        return _difftest.StdinReader_read_all(self, *args)

# Register StdinReader in _difftest:
_difftest.StdinReader_swigregister(StdinReader)
class WimReader(InputReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, addr, size):
        _difftest.WimReader_swiginit(self, _difftest.new_WimReader(addr, size))
    __swig_destroy__ = _difftest.delete_WimReader

    def len(self):
        return _difftest.WimReader_len(self)

    def next(self):
        return _difftest.WimReader_next(self)

    def read_all(self, *args):
        return _difftest.WimReader_read_all(self, *args)

# Register WimReader in _difftest:
_difftest.WimReader_swigregister(WimReader)
class FileReader(InputReader):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename):
        _difftest.FileReader_swiginit(self, _difftest.new_FileReader(filename))
    __swig_destroy__ = _difftest.delete_FileReader

    def len(self):
        return _difftest.FileReader_len(self)

    def next(self):
        return _difftest.FileReader_next(self)

    def read_all(self, *args):
        return _difftest.FileReader_read_all(self, *args)

# Register FileReader in _difftest:
_difftest.FileReader_swigregister(FileReader)
class SimMemory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_SimMemory

    def get_img_size(self):
        return _difftest.SimMemory_get_img_size(self)

    def get_size(self):
        return _difftest.SimMemory_get_size(self)

    def in_range_u8(self, address):
        return _difftest.SimMemory_in_range_u8(self, address)

    def in_range_u64(self, index):
        return _difftest.SimMemory_in_range_u64(self, index)

    def clone(self, func, skip_zero=False):
        return _difftest.SimMemory_clone(self, func, skip_zero)

    def clone_on_demand(self, func, skip_zero=False):
        return _difftest.SimMemory_clone_on_demand(self, func, skip_zero)

    def as_ptr(self):
        return _difftest.SimMemory_as_ptr(self)

    def at(self, index):
        return _difftest.SimMemory_at(self, index)

    def display_stats(self):
        return _difftest.SimMemory_display_stats(self)

# Register SimMemory in _difftest:
_difftest.SimMemory_swigregister(SimMemory)
class MmapMemory(SimMemory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_MmapMemory

    def clone(self, func, skip_zero=False):
        return _difftest.MmapMemory_clone(self, func, skip_zero)

    def at(self, index):
        return _difftest.MmapMemory_at(self, index)

    def as_ptr(self):
        return _difftest.MmapMemory_as_ptr(self)

    def get_img_size(self):
        return _difftest.MmapMemory_get_img_size(self)

# Register MmapMemory in _difftest:
_difftest.MmapMemory_swigregister(MmapMemory)
class MmapMemoryWithFootprints(MmapMemory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_MmapMemoryWithFootprints

    def at(self, index):
        return _difftest.MmapMemoryWithFootprints_at(self, index)

# Register MmapMemoryWithFootprints in _difftest:
_difftest.MmapMemoryWithFootprints_swigregister(MmapMemoryWithFootprints)
class FootprintsMemory(SimMemory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_FootprintsMemory

    def at(self, index):
        return _difftest.FootprintsMemory_at(self, index)

    def clone(self, func, skip_zero=False):
        return _difftest.FootprintsMemory_clone(self, func, skip_zero)

    def clone_on_demand(self, func, skip_zero=False):
        return _difftest.FootprintsMemory_clone_on_demand(self, func, skip_zero)

    def get_img_size(self):
        return _difftest.FootprintsMemory_get_img_size(self)

# Register FootprintsMemory in _difftest:
_difftest.FootprintsMemory_swigregister(FootprintsMemory)
class LinearizedFootprintsMemory(FootprintsMemory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_LinearizedFootprintsMemory

    def save_linear_memory(self, filename):
        return _difftest.LinearizedFootprintsMemory_save_linear_memory(self, filename)

# Register LinearizedFootprintsMemory in _difftest:
_difftest.LinearizedFootprintsMemory_swigregister(LinearizedFootprintsMemory)

def init_ram(image, n_bytes):
    return _difftest.init_ram(image, n_bytes)

def overwrite_ram(gcpt_restore, overwrite_nbytes):
    return _difftest.overwrite_ram(gcpt_restore, overwrite_nbytes)
class flash_device_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    base = property(_difftest.flash_device_t_base_get, _difftest.flash_device_t_base_set)
    size = property(_difftest.flash_device_t_size_get, _difftest.flash_device_t_size_set)
    img_path = property(_difftest.flash_device_t_img_path_get, _difftest.flash_device_t_img_path_set)
    img_size = property(_difftest.flash_device_t_img_size_get, _difftest.flash_device_t_img_size_set)

    def __init__(self):
        _difftest.flash_device_t_swiginit(self, _difftest.new_flash_device_t())
    __swig_destroy__ = _difftest.delete_flash_device_t

# Register flash_device_t in _difftest:
_difftest.flash_device_t_swigregister(flash_device_t)

def init_flash(flash_bin):
    return _difftest.init_flash(flash_bin)

def flash_finish():
    return _difftest.flash_finish()

def flash_read(addr, data):
    return _difftest.flash_read(addr, data)

def init_device():
    return _difftest.init_device()

def finish_device():
    return _difftest.finish_device()

def poll_event():
    return _difftest.poll_event()
CONFIG_DIFFTEST_ZONESIZE = _difftest.CONFIG_DIFFTEST_ZONESIZE
CONFIG_DIFFTEST_BUFLEN = _difftest.CONFIG_DIFFTEST_BUFLEN
NUM_CORES = _difftest.NUM_CORES
CONFIG_DIFF_REFILL_WIDTH = _difftest.CONFIG_DIFF_REFILL_WIDTH
class DifftestRefillEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestRefillEvent_valid_get, _difftest.DifftestRefillEvent_valid_set)
    addr = property(_difftest.DifftestRefillEvent_addr_get, _difftest.DifftestRefillEvent_addr_set)
    data = property(_difftest.DifftestRefillEvent_data_get, _difftest.DifftestRefillEvent_data_set)
    idtfr = property(_difftest.DifftestRefillEvent_idtfr_get, _difftest.DifftestRefillEvent_idtfr_set)

    def __init__(self):
        _difftest.DifftestRefillEvent_swiginit(self, _difftest.new_DifftestRefillEvent())
    __swig_destroy__ = _difftest.delete_DifftestRefillEvent

# Register DifftestRefillEvent in _difftest:
_difftest.DifftestRefillEvent_swigregister(DifftestRefillEvent)
class DifftestLrScEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestLrScEvent_valid_get, _difftest.DifftestLrScEvent_valid_set)
    success = property(_difftest.DifftestLrScEvent_success_get, _difftest.DifftestLrScEvent_success_set)

    def __init__(self):
        _difftest.DifftestLrScEvent_swiginit(self, _difftest.new_DifftestLrScEvent())
    __swig_destroy__ = _difftest.delete_DifftestLrScEvent

# Register DifftestLrScEvent in _difftest:
_difftest.DifftestLrScEvent_swigregister(DifftestLrScEvent)
CONFIG_DIFF_STORE_WIDTH = _difftest.CONFIG_DIFF_STORE_WIDTH
class DifftestStoreEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestStoreEvent_valid_get, _difftest.DifftestStoreEvent_valid_set)
    addr = property(_difftest.DifftestStoreEvent_addr_get, _difftest.DifftestStoreEvent_addr_set)
    data = property(_difftest.DifftestStoreEvent_data_get, _difftest.DifftestStoreEvent_data_set)
    mask = property(_difftest.DifftestStoreEvent_mask_get, _difftest.DifftestStoreEvent_mask_set)
    pc = property(_difftest.DifftestStoreEvent_pc_get, _difftest.DifftestStoreEvent_pc_set)
    robidx = property(_difftest.DifftestStoreEvent_robidx_get, _difftest.DifftestStoreEvent_robidx_set)

    def __init__(self):
        _difftest.DifftestStoreEvent_swiginit(self, _difftest.new_DifftestStoreEvent())
    __swig_destroy__ = _difftest.delete_DifftestStoreEvent

# Register DifftestStoreEvent in _difftest:
_difftest.DifftestStoreEvent_swigregister(DifftestStoreEvent)
class DifftestHCSRState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    virtMode = property(_difftest.DifftestHCSRState_virtMode_get, _difftest.DifftestHCSRState_virtMode_set)
    mtval2 = property(_difftest.DifftestHCSRState_mtval2_get, _difftest.DifftestHCSRState_mtval2_set)
    mtinst = property(_difftest.DifftestHCSRState_mtinst_get, _difftest.DifftestHCSRState_mtinst_set)
    hstatus = property(_difftest.DifftestHCSRState_hstatus_get, _difftest.DifftestHCSRState_hstatus_set)
    hideleg = property(_difftest.DifftestHCSRState_hideleg_get, _difftest.DifftestHCSRState_hideleg_set)
    hedeleg = property(_difftest.DifftestHCSRState_hedeleg_get, _difftest.DifftestHCSRState_hedeleg_set)
    hcounteren = property(_difftest.DifftestHCSRState_hcounteren_get, _difftest.DifftestHCSRState_hcounteren_set)
    htval = property(_difftest.DifftestHCSRState_htval_get, _difftest.DifftestHCSRState_htval_set)
    htinst = property(_difftest.DifftestHCSRState_htinst_get, _difftest.DifftestHCSRState_htinst_set)
    hgatp = property(_difftest.DifftestHCSRState_hgatp_get, _difftest.DifftestHCSRState_hgatp_set)
    vsstatus = property(_difftest.DifftestHCSRState_vsstatus_get, _difftest.DifftestHCSRState_vsstatus_set)
    vstvec = property(_difftest.DifftestHCSRState_vstvec_get, _difftest.DifftestHCSRState_vstvec_set)
    vsepc = property(_difftest.DifftestHCSRState_vsepc_get, _difftest.DifftestHCSRState_vsepc_set)
    vscause = property(_difftest.DifftestHCSRState_vscause_get, _difftest.DifftestHCSRState_vscause_set)
    vstval = property(_difftest.DifftestHCSRState_vstval_get, _difftest.DifftestHCSRState_vstval_set)
    vsatp = property(_difftest.DifftestHCSRState_vsatp_get, _difftest.DifftestHCSRState_vsatp_set)
    vsscratch = property(_difftest.DifftestHCSRState_vsscratch_get, _difftest.DifftestHCSRState_vsscratch_set)

    def __init__(self):
        _difftest.DifftestHCSRState_swiginit(self, _difftest.new_DifftestHCSRState())
    __swig_destroy__ = _difftest.delete_DifftestHCSRState

# Register DifftestHCSRState in _difftest:
_difftest.DifftestHCSRState_swigregister(DifftestHCSRState)
class DifftestSyncAIAEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestSyncAIAEvent_valid_get, _difftest.DifftestSyncAIAEvent_valid_set)
    mtopei = property(_difftest.DifftestSyncAIAEvent_mtopei_get, _difftest.DifftestSyncAIAEvent_mtopei_set)
    stopei = property(_difftest.DifftestSyncAIAEvent_stopei_get, _difftest.DifftestSyncAIAEvent_stopei_set)
    vstopei = property(_difftest.DifftestSyncAIAEvent_vstopei_get, _difftest.DifftestSyncAIAEvent_vstopei_set)
    hgeip = property(_difftest.DifftestSyncAIAEvent_hgeip_get, _difftest.DifftestSyncAIAEvent_hgeip_set)

    def __init__(self):
        _difftest.DifftestSyncAIAEvent_swiginit(self, _difftest.new_DifftestSyncAIAEvent())
    __swig_destroy__ = _difftest.delete_DifftestSyncAIAEvent

# Register DifftestSyncAIAEvent in _difftest:
_difftest.DifftestSyncAIAEvent_swigregister(DifftestSyncAIAEvent)
class DifftestCriticalErrorEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestCriticalErrorEvent_valid_get, _difftest.DifftestCriticalErrorEvent_valid_set)
    criticalError = property(_difftest.DifftestCriticalErrorEvent_criticalError_get, _difftest.DifftestCriticalErrorEvent_criticalError_set)

    def __init__(self):
        _difftest.DifftestCriticalErrorEvent_swiginit(self, _difftest.new_DifftestCriticalErrorEvent())
    __swig_destroy__ = _difftest.delete_DifftestCriticalErrorEvent

# Register DifftestCriticalErrorEvent in _difftest:
_difftest.DifftestCriticalErrorEvent_swigregister(DifftestCriticalErrorEvent)
CONFIG_DIFF_WB_VEC_WIDTH = _difftest.CONFIG_DIFF_WB_VEC_WIDTH
class DifftestVecWriteback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_difftest.DifftestVecWriteback_data_get, _difftest.DifftestVecWriteback_data_set)

    def __init__(self):
        _difftest.DifftestVecWriteback_swiginit(self, _difftest.new_DifftestVecWriteback())
    __swig_destroy__ = _difftest.delete_DifftestVecWriteback

# Register DifftestVecWriteback in _difftest:
_difftest.DifftestVecWriteback_swigregister(DifftestVecWriteback)
CONFIG_DIFF_WB_FP_WIDTH = _difftest.CONFIG_DIFF_WB_FP_WIDTH
class DifftestFpWriteback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_difftest.DifftestFpWriteback_data_get, _difftest.DifftestFpWriteback_data_set)

    def __init__(self):
        _difftest.DifftestFpWriteback_swiginit(self, _difftest.new_DifftestFpWriteback())
    __swig_destroy__ = _difftest.delete_DifftestFpWriteback

# Register DifftestFpWriteback in _difftest:
_difftest.DifftestFpWriteback_swigregister(DifftestFpWriteback)
class DifftestSyncCustomMflushpwrEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestSyncCustomMflushpwrEvent_valid_get, _difftest.DifftestSyncCustomMflushpwrEvent_valid_set)
    l2FlushDone = property(_difftest.DifftestSyncCustomMflushpwrEvent_l2FlushDone_get, _difftest.DifftestSyncCustomMflushpwrEvent_l2FlushDone_set)

    def __init__(self):
        _difftest.DifftestSyncCustomMflushpwrEvent_swiginit(self, _difftest.new_DifftestSyncCustomMflushpwrEvent())
    __swig_destroy__ = _difftest.delete_DifftestSyncCustomMflushpwrEvent

# Register DifftestSyncCustomMflushpwrEvent in _difftest:
_difftest.DifftestSyncCustomMflushpwrEvent_swigregister(DifftestSyncCustomMflushpwrEvent)
class DifftestDebugMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    debugMode = property(_difftest.DifftestDebugMode_debugMode_get, _difftest.DifftestDebugMode_debugMode_set)
    dcsr = property(_difftest.DifftestDebugMode_dcsr_get, _difftest.DifftestDebugMode_dcsr_set)
    dpc = property(_difftest.DifftestDebugMode_dpc_get, _difftest.DifftestDebugMode_dpc_set)
    dscratch0 = property(_difftest.DifftestDebugMode_dscratch0_get, _difftest.DifftestDebugMode_dscratch0_set)
    dscratch1 = property(_difftest.DifftestDebugMode_dscratch1_get, _difftest.DifftestDebugMode_dscratch1_set)

    def __init__(self):
        _difftest.DifftestDebugMode_swiginit(self, _difftest.new_DifftestDebugMode())
    __swig_destroy__ = _difftest.delete_DifftestDebugMode

# Register DifftestDebugMode in _difftest:
_difftest.DifftestDebugMode_swigregister(DifftestDebugMode)
CONFIG_DIFF_SBUFFER_WIDTH = _difftest.CONFIG_DIFF_SBUFFER_WIDTH
class DifftestSbufferEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestSbufferEvent_valid_get, _difftest.DifftestSbufferEvent_valid_set)
    addr = property(_difftest.DifftestSbufferEvent_addr_get, _difftest.DifftestSbufferEvent_addr_set)
    data = property(_difftest.DifftestSbufferEvent_data_get, _difftest.DifftestSbufferEvent_data_set)
    mask = property(_difftest.DifftestSbufferEvent_mask_get, _difftest.DifftestSbufferEvent_mask_set)

    def __init__(self):
        _difftest.DifftestSbufferEvent_swiginit(self, _difftest.new_DifftestSbufferEvent())
    __swig_destroy__ = _difftest.delete_DifftestSbufferEvent

# Register DifftestSbufferEvent in _difftest:
_difftest.DifftestSbufferEvent_swigregister(DifftestSbufferEvent)
CONFIG_DIFF_COMMIT_WIDTH = _difftest.CONFIG_DIFF_COMMIT_WIDTH
class DifftestInstrCommit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestInstrCommit_valid_get, _difftest.DifftestInstrCommit_valid_set)
    skip = property(_difftest.DifftestInstrCommit_skip_get, _difftest.DifftestInstrCommit_skip_set)
    isRVC = property(_difftest.DifftestInstrCommit_isRVC_get, _difftest.DifftestInstrCommit_isRVC_set)
    rfwen = property(_difftest.DifftestInstrCommit_rfwen_get, _difftest.DifftestInstrCommit_rfwen_set)
    fpwen = property(_difftest.DifftestInstrCommit_fpwen_get, _difftest.DifftestInstrCommit_fpwen_set)
    vecwen = property(_difftest.DifftestInstrCommit_vecwen_get, _difftest.DifftestInstrCommit_vecwen_set)
    v0wen = property(_difftest.DifftestInstrCommit_v0wen_get, _difftest.DifftestInstrCommit_v0wen_set)
    wpdest = property(_difftest.DifftestInstrCommit_wpdest_get, _difftest.DifftestInstrCommit_wpdest_set)
    wdest = property(_difftest.DifftestInstrCommit_wdest_get, _difftest.DifftestInstrCommit_wdest_set)
    otherwpdest = property(_difftest.DifftestInstrCommit_otherwpdest_get, _difftest.DifftestInstrCommit_otherwpdest_set)
    otherV0Wen = property(_difftest.DifftestInstrCommit_otherV0Wen_get, _difftest.DifftestInstrCommit_otherV0Wen_set)
    pc = property(_difftest.DifftestInstrCommit_pc_get, _difftest.DifftestInstrCommit_pc_set)
    instr = property(_difftest.DifftestInstrCommit_instr_get, _difftest.DifftestInstrCommit_instr_set)
    robIdx = property(_difftest.DifftestInstrCommit_robIdx_get, _difftest.DifftestInstrCommit_robIdx_set)
    lqIdx = property(_difftest.DifftestInstrCommit_lqIdx_get, _difftest.DifftestInstrCommit_lqIdx_set)
    sqIdx = property(_difftest.DifftestInstrCommit_sqIdx_get, _difftest.DifftestInstrCommit_sqIdx_set)
    isLoad = property(_difftest.DifftestInstrCommit_isLoad_get, _difftest.DifftestInstrCommit_isLoad_set)
    isStore = property(_difftest.DifftestInstrCommit_isStore_get, _difftest.DifftestInstrCommit_isStore_set)
    nFused = property(_difftest.DifftestInstrCommit_nFused_get, _difftest.DifftestInstrCommit_nFused_set)
    special = property(_difftest.DifftestInstrCommit_special_get, _difftest.DifftestInstrCommit_special_set)

    def get_pc_address(self):
        return _difftest.DifftestInstrCommit_get_pc_address(self)

    def get_pc_length(self):
        return _difftest.DifftestInstrCommit_get_pc_length(self)

    def get_valid_address(self):
        return _difftest.DifftestInstrCommit_get_valid_address(self)

    def get_valid_length(self):
        return _difftest.DifftestInstrCommit_get_valid_length(self)

    def get_instr_address(self):
        return _difftest.DifftestInstrCommit_get_instr_address(self)

    def get_instr_length(self):
        return _difftest.DifftestInstrCommit_get_instr_length(self)

    def __init__(self):
        _difftest.DifftestInstrCommit_swiginit(self, _difftest.new_DifftestInstrCommit())
    __swig_destroy__ = _difftest.delete_DifftestInstrCommit

# Register DifftestInstrCommit in _difftest:
_difftest.DifftestInstrCommit_swigregister(DifftestInstrCommit)
CONFIG_DIFF_L2TLB_WIDTH = _difftest.CONFIG_DIFF_L2TLB_WIDTH
class DifftestL2TLBEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestL2TLBEvent_valid_get, _difftest.DifftestL2TLBEvent_valid_set)
    valididx = property(_difftest.DifftestL2TLBEvent_valididx_get, _difftest.DifftestL2TLBEvent_valididx_set)
    satp = property(_difftest.DifftestL2TLBEvent_satp_get, _difftest.DifftestL2TLBEvent_satp_set)
    vpn = property(_difftest.DifftestL2TLBEvent_vpn_get, _difftest.DifftestL2TLBEvent_vpn_set)
    pbmt = property(_difftest.DifftestL2TLBEvent_pbmt_get, _difftest.DifftestL2TLBEvent_pbmt_set)
    g_pbmt = property(_difftest.DifftestL2TLBEvent_g_pbmt_get, _difftest.DifftestL2TLBEvent_g_pbmt_set)
    ppn = property(_difftest.DifftestL2TLBEvent_ppn_get, _difftest.DifftestL2TLBEvent_ppn_set)
    perm = property(_difftest.DifftestL2TLBEvent_perm_get, _difftest.DifftestL2TLBEvent_perm_set)
    level = property(_difftest.DifftestL2TLBEvent_level_get, _difftest.DifftestL2TLBEvent_level_set)
    pf = property(_difftest.DifftestL2TLBEvent_pf_get, _difftest.DifftestL2TLBEvent_pf_set)
    pteidx = property(_difftest.DifftestL2TLBEvent_pteidx_get, _difftest.DifftestL2TLBEvent_pteidx_set)
    vsatp = property(_difftest.DifftestL2TLBEvent_vsatp_get, _difftest.DifftestL2TLBEvent_vsatp_set)
    hgatp = property(_difftest.DifftestL2TLBEvent_hgatp_get, _difftest.DifftestL2TLBEvent_hgatp_set)
    gvpn = property(_difftest.DifftestL2TLBEvent_gvpn_get, _difftest.DifftestL2TLBEvent_gvpn_set)
    g_perm = property(_difftest.DifftestL2TLBEvent_g_perm_get, _difftest.DifftestL2TLBEvent_g_perm_set)
    g_level = property(_difftest.DifftestL2TLBEvent_g_level_get, _difftest.DifftestL2TLBEvent_g_level_set)
    s2ppn = property(_difftest.DifftestL2TLBEvent_s2ppn_get, _difftest.DifftestL2TLBEvent_s2ppn_set)
    gpf = property(_difftest.DifftestL2TLBEvent_gpf_get, _difftest.DifftestL2TLBEvent_gpf_set)
    s2xlate = property(_difftest.DifftestL2TLBEvent_s2xlate_get, _difftest.DifftestL2TLBEvent_s2xlate_set)

    def __init__(self):
        _difftest.DifftestL2TLBEvent_swiginit(self, _difftest.new_DifftestL2TLBEvent())
    __swig_destroy__ = _difftest.delete_DifftestL2TLBEvent

# Register DifftestL2TLBEvent in _difftest:
_difftest.DifftestL2TLBEvent_swigregister(DifftestL2TLBEvent)
class DifftestMhpmeventOverflowEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestMhpmeventOverflowEvent_valid_get, _difftest.DifftestMhpmeventOverflowEvent_valid_set)
    mhpmeventOverflow = property(_difftest.DifftestMhpmeventOverflowEvent_mhpmeventOverflow_get, _difftest.DifftestMhpmeventOverflowEvent_mhpmeventOverflow_set)

    def __init__(self):
        _difftest.DifftestMhpmeventOverflowEvent_swiginit(self, _difftest.new_DifftestMhpmeventOverflowEvent())
    __swig_destroy__ = _difftest.delete_DifftestMhpmeventOverflowEvent

# Register DifftestMhpmeventOverflowEvent in _difftest:
_difftest.DifftestMhpmeventOverflowEvent_swigregister(DifftestMhpmeventOverflowEvent)
class DifftestArchIntRegState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_difftest.DifftestArchIntRegState_value_get, _difftest.DifftestArchIntRegState_value_set)

    def __init__(self):
        _difftest.DifftestArchIntRegState_swiginit(self, _difftest.new_DifftestArchIntRegState())
    __swig_destroy__ = _difftest.delete_DifftestArchIntRegState

# Register DifftestArchIntRegState in _difftest:
_difftest.DifftestArchIntRegState_swigregister(DifftestArchIntRegState)
class DifftestVecCSRState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vstart = property(_difftest.DifftestVecCSRState_vstart_get, _difftest.DifftestVecCSRState_vstart_set)
    vxsat = property(_difftest.DifftestVecCSRState_vxsat_get, _difftest.DifftestVecCSRState_vxsat_set)
    vxrm = property(_difftest.DifftestVecCSRState_vxrm_get, _difftest.DifftestVecCSRState_vxrm_set)
    vcsr = property(_difftest.DifftestVecCSRState_vcsr_get, _difftest.DifftestVecCSRState_vcsr_set)
    vl = property(_difftest.DifftestVecCSRState_vl_get, _difftest.DifftestVecCSRState_vl_set)
    vtype = property(_difftest.DifftestVecCSRState_vtype_get, _difftest.DifftestVecCSRState_vtype_set)
    vlenb = property(_difftest.DifftestVecCSRState_vlenb_get, _difftest.DifftestVecCSRState_vlenb_set)

    def __init__(self):
        _difftest.DifftestVecCSRState_swiginit(self, _difftest.new_DifftestVecCSRState())
    __swig_destroy__ = _difftest.delete_DifftestVecCSRState

# Register DifftestVecCSRState in _difftest:
_difftest.DifftestVecCSRState_swigregister(DifftestVecCSRState)
class DifftestNonRegInterruptPendingEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestNonRegInterruptPendingEvent_valid_get, _difftest.DifftestNonRegInterruptPendingEvent_valid_set)
    platformIRPMeip = property(_difftest.DifftestNonRegInterruptPendingEvent_platformIRPMeip_get, _difftest.DifftestNonRegInterruptPendingEvent_platformIRPMeip_set)
    platformIRPMtip = property(_difftest.DifftestNonRegInterruptPendingEvent_platformIRPMtip_get, _difftest.DifftestNonRegInterruptPendingEvent_platformIRPMtip_set)
    platformIRPMsip = property(_difftest.DifftestNonRegInterruptPendingEvent_platformIRPMsip_get, _difftest.DifftestNonRegInterruptPendingEvent_platformIRPMsip_set)
    platformIRPSeip = property(_difftest.DifftestNonRegInterruptPendingEvent_platformIRPSeip_get, _difftest.DifftestNonRegInterruptPendingEvent_platformIRPSeip_set)
    platformIRPStip = property(_difftest.DifftestNonRegInterruptPendingEvent_platformIRPStip_get, _difftest.DifftestNonRegInterruptPendingEvent_platformIRPStip_set)
    platformIRPVseip = property(_difftest.DifftestNonRegInterruptPendingEvent_platformIRPVseip_get, _difftest.DifftestNonRegInterruptPendingEvent_platformIRPVseip_set)
    platformIRPVstip = property(_difftest.DifftestNonRegInterruptPendingEvent_platformIRPVstip_get, _difftest.DifftestNonRegInterruptPendingEvent_platformIRPVstip_set)
    fromAIAMeip = property(_difftest.DifftestNonRegInterruptPendingEvent_fromAIAMeip_get, _difftest.DifftestNonRegInterruptPendingEvent_fromAIAMeip_set)
    fromAIASeip = property(_difftest.DifftestNonRegInterruptPendingEvent_fromAIASeip_get, _difftest.DifftestNonRegInterruptPendingEvent_fromAIASeip_set)
    localCounterOverflowInterruptReq = property(_difftest.DifftestNonRegInterruptPendingEvent_localCounterOverflowInterruptReq_get, _difftest.DifftestNonRegInterruptPendingEvent_localCounterOverflowInterruptReq_set)

    def __init__(self):
        _difftest.DifftestNonRegInterruptPendingEvent_swiginit(self, _difftest.new_DifftestNonRegInterruptPendingEvent())
    __swig_destroy__ = _difftest.delete_DifftestNonRegInterruptPendingEvent

# Register DifftestNonRegInterruptPendingEvent in _difftest:
_difftest.DifftestNonRegInterruptPendingEvent_swigregister(DifftestNonRegInterruptPendingEvent)
CONFIG_DIFF_L1TLB_WIDTH = _difftest.CONFIG_DIFF_L1TLB_WIDTH
class DifftestL1TLBEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestL1TLBEvent_valid_get, _difftest.DifftestL1TLBEvent_valid_set)
    satp = property(_difftest.DifftestL1TLBEvent_satp_get, _difftest.DifftestL1TLBEvent_satp_set)
    vpn = property(_difftest.DifftestL1TLBEvent_vpn_get, _difftest.DifftestL1TLBEvent_vpn_set)
    ppn = property(_difftest.DifftestL1TLBEvent_ppn_get, _difftest.DifftestL1TLBEvent_ppn_set)
    vsatp = property(_difftest.DifftestL1TLBEvent_vsatp_get, _difftest.DifftestL1TLBEvent_vsatp_set)
    hgatp = property(_difftest.DifftestL1TLBEvent_hgatp_get, _difftest.DifftestL1TLBEvent_hgatp_set)
    s2xlate = property(_difftest.DifftestL1TLBEvent_s2xlate_get, _difftest.DifftestL1TLBEvent_s2xlate_set)

    def __init__(self):
        _difftest.DifftestL1TLBEvent_swiginit(self, _difftest.new_DifftestL1TLBEvent())
    __swig_destroy__ = _difftest.delete_DifftestL1TLBEvent

# Register DifftestL1TLBEvent in _difftest:
_difftest.DifftestL1TLBEvent_swigregister(DifftestL1TLBEvent)
class DifftestAtomicEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestAtomicEvent_valid_get, _difftest.DifftestAtomicEvent_valid_set)
    addr = property(_difftest.DifftestAtomicEvent_addr_get, _difftest.DifftestAtomicEvent_addr_set)
    data = property(_difftest.DifftestAtomicEvent_data_get, _difftest.DifftestAtomicEvent_data_set)
    mask = property(_difftest.DifftestAtomicEvent_mask_get, _difftest.DifftestAtomicEvent_mask_set)
    cmp = property(_difftest.DifftestAtomicEvent_cmp_get, _difftest.DifftestAtomicEvent_cmp_set)
    fuop = property(_difftest.DifftestAtomicEvent_fuop_get, _difftest.DifftestAtomicEvent_fuop_set)
    out = property(_difftest.DifftestAtomicEvent_out_get, _difftest.DifftestAtomicEvent_out_set)

    def __init__(self):
        _difftest.DifftestAtomicEvent_swiginit(self, _difftest.new_DifftestAtomicEvent())
    __swig_destroy__ = _difftest.delete_DifftestAtomicEvent

# Register DifftestAtomicEvent in _difftest:
_difftest.DifftestAtomicEvent_swigregister(DifftestAtomicEvent)
class DifftestCMOInvalEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestCMOInvalEvent_valid_get, _difftest.DifftestCMOInvalEvent_valid_set)
    addr = property(_difftest.DifftestCMOInvalEvent_addr_get, _difftest.DifftestCMOInvalEvent_addr_set)

    def __init__(self):
        _difftest.DifftestCMOInvalEvent_swiginit(self, _difftest.new_DifftestCMOInvalEvent())
    __swig_destroy__ = _difftest.delete_DifftestCMOInvalEvent

# Register DifftestCMOInvalEvent in _difftest:
_difftest.DifftestCMOInvalEvent_swigregister(DifftestCMOInvalEvent)
class DifftestArchVecRegState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_difftest.DifftestArchVecRegState_value_get, _difftest.DifftestArchVecRegState_value_set)

    def __init__(self):
        _difftest.DifftestArchVecRegState_swiginit(self, _difftest.new_DifftestArchVecRegState())
    __swig_destroy__ = _difftest.delete_DifftestArchVecRegState

# Register DifftestArchVecRegState in _difftest:
_difftest.DifftestArchVecRegState_swigregister(DifftestArchVecRegState)
CONFIG_DIFF_UNCACHE_MM_STORE_WIDTH = _difftest.CONFIG_DIFF_UNCACHE_MM_STORE_WIDTH
class DifftestUncacheMMStoreEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestUncacheMMStoreEvent_valid_get, _difftest.DifftestUncacheMMStoreEvent_valid_set)
    addr = property(_difftest.DifftestUncacheMMStoreEvent_addr_get, _difftest.DifftestUncacheMMStoreEvent_addr_set)
    data = property(_difftest.DifftestUncacheMMStoreEvent_data_get, _difftest.DifftestUncacheMMStoreEvent_data_set)
    mask = property(_difftest.DifftestUncacheMMStoreEvent_mask_get, _difftest.DifftestUncacheMMStoreEvent_mask_set)

    def __init__(self):
        _difftest.DifftestUncacheMMStoreEvent_swiginit(self, _difftest.new_DifftestUncacheMMStoreEvent())
    __swig_destroy__ = _difftest.delete_DifftestUncacheMMStoreEvent

# Register DifftestUncacheMMStoreEvent in _difftest:
_difftest.DifftestUncacheMMStoreEvent_swigregister(DifftestUncacheMMStoreEvent)
class DifftestArchFpRegState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_difftest.DifftestArchFpRegState_value_get, _difftest.DifftestArchFpRegState_value_set)

    def __init__(self):
        _difftest.DifftestArchFpRegState_swiginit(self, _difftest.new_DifftestArchFpRegState())
    __swig_destroy__ = _difftest.delete_DifftestArchFpRegState

# Register DifftestArchFpRegState in _difftest:
_difftest.DifftestArchFpRegState_swigregister(DifftestArchFpRegState)
class DifftestCSRState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    privilegeMode = property(_difftest.DifftestCSRState_privilegeMode_get, _difftest.DifftestCSRState_privilegeMode_set)
    mstatus = property(_difftest.DifftestCSRState_mstatus_get, _difftest.DifftestCSRState_mstatus_set)
    sstatus = property(_difftest.DifftestCSRState_sstatus_get, _difftest.DifftestCSRState_sstatus_set)
    mepc = property(_difftest.DifftestCSRState_mepc_get, _difftest.DifftestCSRState_mepc_set)
    sepc = property(_difftest.DifftestCSRState_sepc_get, _difftest.DifftestCSRState_sepc_set)
    mtval = property(_difftest.DifftestCSRState_mtval_get, _difftest.DifftestCSRState_mtval_set)
    stval = property(_difftest.DifftestCSRState_stval_get, _difftest.DifftestCSRState_stval_set)
    mtvec = property(_difftest.DifftestCSRState_mtvec_get, _difftest.DifftestCSRState_mtvec_set)
    stvec = property(_difftest.DifftestCSRState_stvec_get, _difftest.DifftestCSRState_stvec_set)
    mcause = property(_difftest.DifftestCSRState_mcause_get, _difftest.DifftestCSRState_mcause_set)
    scause = property(_difftest.DifftestCSRState_scause_get, _difftest.DifftestCSRState_scause_set)
    satp = property(_difftest.DifftestCSRState_satp_get, _difftest.DifftestCSRState_satp_set)
    mip = property(_difftest.DifftestCSRState_mip_get, _difftest.DifftestCSRState_mip_set)
    mie = property(_difftest.DifftestCSRState_mie_get, _difftest.DifftestCSRState_mie_set)
    mscratch = property(_difftest.DifftestCSRState_mscratch_get, _difftest.DifftestCSRState_mscratch_set)
    sscratch = property(_difftest.DifftestCSRState_sscratch_get, _difftest.DifftestCSRState_sscratch_set)
    mideleg = property(_difftest.DifftestCSRState_mideleg_get, _difftest.DifftestCSRState_mideleg_set)
    medeleg = property(_difftest.DifftestCSRState_medeleg_get, _difftest.DifftestCSRState_medeleg_set)

    def __init__(self):
        _difftest.DifftestCSRState_swiginit(self, _difftest.new_DifftestCSRState())
    __swig_destroy__ = _difftest.delete_DifftestCSRState

# Register DifftestCSRState in _difftest:
_difftest.DifftestCSRState_swigregister(DifftestCSRState)
class DifftestTrapEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hasTrap = property(_difftest.DifftestTrapEvent_hasTrap_get, _difftest.DifftestTrapEvent_hasTrap_set)
    cycleCnt = property(_difftest.DifftestTrapEvent_cycleCnt_get, _difftest.DifftestTrapEvent_cycleCnt_set)
    instrCnt = property(_difftest.DifftestTrapEvent_instrCnt_get, _difftest.DifftestTrapEvent_instrCnt_set)
    hasWFI = property(_difftest.DifftestTrapEvent_hasWFI_get, _difftest.DifftestTrapEvent_hasWFI_set)
    code = property(_difftest.DifftestTrapEvent_code_get, _difftest.DifftestTrapEvent_code_set)
    pc = property(_difftest.DifftestTrapEvent_pc_get, _difftest.DifftestTrapEvent_pc_set)

    def get_pc_address(self):
        return _difftest.DifftestTrapEvent_get_pc_address(self)

    def get_pc_length(self):
        return _difftest.DifftestTrapEvent_get_pc_length(self)

    def get_code_address(self):
        return _difftest.DifftestTrapEvent_get_code_address(self)

    def get_code_length(self):
        return _difftest.DifftestTrapEvent_get_code_length(self)

    def get_hasTrap_address(self):
        return _difftest.DifftestTrapEvent_get_hasTrap_address(self)

    def get_hasTrap_length(self):
        return _difftest.DifftestTrapEvent_get_hasTrap_length(self)

    def __init__(self):
        _difftest.DifftestTrapEvent_swiginit(self, _difftest.new_DifftestTrapEvent())
    __swig_destroy__ = _difftest.delete_DifftestTrapEvent

# Register DifftestTrapEvent in _difftest:
_difftest.DifftestTrapEvent_swigregister(DifftestTrapEvent)
class DifftestFpCSRState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fcsr = property(_difftest.DifftestFpCSRState_fcsr_get, _difftest.DifftestFpCSRState_fcsr_set)

    def __init__(self):
        _difftest.DifftestFpCSRState_swiginit(self, _difftest.new_DifftestFpCSRState())
    __swig_destroy__ = _difftest.delete_DifftestFpCSRState

# Register DifftestFpCSRState in _difftest:
_difftest.DifftestFpCSRState_swigregister(DifftestFpCSRState)
class DifftestTriggerCSRState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tselect = property(_difftest.DifftestTriggerCSRState_tselect_get, _difftest.DifftestTriggerCSRState_tselect_set)
    tdata1 = property(_difftest.DifftestTriggerCSRState_tdata1_get, _difftest.DifftestTriggerCSRState_tdata1_set)
    tinfo = property(_difftest.DifftestTriggerCSRState_tinfo_get, _difftest.DifftestTriggerCSRState_tinfo_set)

    def __init__(self):
        _difftest.DifftestTriggerCSRState_swiginit(self, _difftest.new_DifftestTriggerCSRState())
    __swig_destroy__ = _difftest.delete_DifftestTriggerCSRState

# Register DifftestTriggerCSRState in _difftest:
_difftest.DifftestTriggerCSRState_swigregister(DifftestTriggerCSRState)
CONFIG_DIFF_WB_INT_WIDTH = _difftest.CONFIG_DIFF_WB_INT_WIDTH
class DifftestIntWriteback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_difftest.DifftestIntWriteback_data_get, _difftest.DifftestIntWriteback_data_set)

    def __init__(self):
        _difftest.DifftestIntWriteback_swiginit(self, _difftest.new_DifftestIntWriteback())
    __swig_destroy__ = _difftest.delete_DifftestIntWriteback

# Register DifftestIntWriteback in _difftest:
_difftest.DifftestIntWriteback_swigregister(DifftestIntWriteback)
CONFIG_DIFF_WB_V0_WIDTH = _difftest.CONFIG_DIFF_WB_V0_WIDTH
class DifftestVecV0Writeback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_difftest.DifftestVecV0Writeback_data_get, _difftest.DifftestVecV0Writeback_data_set)

    def __init__(self):
        _difftest.DifftestVecV0Writeback_swiginit(self, _difftest.new_DifftestVecV0Writeback())
    __swig_destroy__ = _difftest.delete_DifftestVecV0Writeback

# Register DifftestVecV0Writeback in _difftest:
_difftest.DifftestVecV0Writeback_swigregister(DifftestVecV0Writeback)
class DifftestArchEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestArchEvent_valid_get, _difftest.DifftestArchEvent_valid_set)
    interrupt = property(_difftest.DifftestArchEvent_interrupt_get, _difftest.DifftestArchEvent_interrupt_set)
    exception = property(_difftest.DifftestArchEvent_exception_get, _difftest.DifftestArchEvent_exception_set)
    exceptionPC = property(_difftest.DifftestArchEvent_exceptionPC_get, _difftest.DifftestArchEvent_exceptionPC_set)
    exceptionInst = property(_difftest.DifftestArchEvent_exceptionInst_get, _difftest.DifftestArchEvent_exceptionInst_set)
    hasNMI = property(_difftest.DifftestArchEvent_hasNMI_get, _difftest.DifftestArchEvent_hasNMI_set)
    virtualInterruptIsHvictlInject = property(_difftest.DifftestArchEvent_virtualInterruptIsHvictlInject_get, _difftest.DifftestArchEvent_virtualInterruptIsHvictlInject_set)
    irToHS = property(_difftest.DifftestArchEvent_irToHS_get, _difftest.DifftestArchEvent_irToHS_set)
    irToVS = property(_difftest.DifftestArchEvent_irToVS_get, _difftest.DifftestArchEvent_irToVS_set)

    def __init__(self):
        _difftest.DifftestArchEvent_swiginit(self, _difftest.new_DifftestArchEvent())
    __swig_destroy__ = _difftest.delete_DifftestArchEvent

# Register DifftestArchEvent in _difftest:
_difftest.DifftestArchEvent_swigregister(DifftestArchEvent)
CONFIG_DIFF_LOAD_WIDTH = _difftest.CONFIG_DIFF_LOAD_WIDTH
class DifftestLoadEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_difftest.DifftestLoadEvent_valid_get, _difftest.DifftestLoadEvent_valid_set)
    paddr = property(_difftest.DifftestLoadEvent_paddr_get, _difftest.DifftestLoadEvent_paddr_set)
    opType = property(_difftest.DifftestLoadEvent_opType_get, _difftest.DifftestLoadEvent_opType_set)
    isAtomic = property(_difftest.DifftestLoadEvent_isAtomic_get, _difftest.DifftestLoadEvent_isAtomic_set)
    isLoad = property(_difftest.DifftestLoadEvent_isLoad_get, _difftest.DifftestLoadEvent_isLoad_set)
    isVLoad = property(_difftest.DifftestLoadEvent_isVLoad_get, _difftest.DifftestLoadEvent_isVLoad_set)

    def __init__(self):
        _difftest.DifftestLoadEvent_swiginit(self, _difftest.new_DifftestLoadEvent())
    __swig_destroy__ = _difftest.delete_DifftestLoadEvent

# Register DifftestLoadEvent in _difftest:
_difftest.DifftestLoadEvent_swigregister(DifftestLoadEvent)
class DiffTestState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regs_int = property(_difftest.DiffTestState_regs_int_get, _difftest.DiffTestState_regs_int_set)
    csr = property(_difftest.DiffTestState_csr_get, _difftest.DiffTestState_csr_set)
    regs_fp = property(_difftest.DiffTestState_regs_fp_get, _difftest.DiffTestState_regs_fp_set)
    regs_vec = property(_difftest.DiffTestState_regs_vec_get, _difftest.DiffTestState_regs_vec_set)
    vcsr = property(_difftest.DiffTestState_vcsr_get, _difftest.DiffTestState_vcsr_set)
    hcsr = property(_difftest.DiffTestState_hcsr_get, _difftest.DiffTestState_hcsr_set)
    fcsr = property(_difftest.DiffTestState_fcsr_get, _difftest.DiffTestState_fcsr_set)
    event = property(_difftest.DiffTestState_event_get, _difftest.DiffTestState_event_set)
    atomic = property(_difftest.DiffTestState_atomic_get, _difftest.DiffTestState_atomic_set)
    cmo_inval = property(_difftest.DiffTestState_cmo_inval_get, _difftest.DiffTestState_cmo_inval_set)
    critical_error = property(_difftest.DiffTestState_critical_error_get, _difftest.DiffTestState_critical_error_set)
    dmregs = property(_difftest.DiffTestState_dmregs_get, _difftest.DiffTestState_dmregs_set)
    wb_fp = property(_difftest.DiffTestState_wb_fp_get, _difftest.DiffTestState_wb_fp_set)
    commit = property(_difftest.DiffTestState_commit_get, _difftest.DiffTestState_commit_set)
    wb_int = property(_difftest.DiffTestState_wb_int_get, _difftest.DiffTestState_wb_int_set)
    l1tlb = property(_difftest.DiffTestState_l1tlb_get, _difftest.DiffTestState_l1tlb_set)
    l2tlb = property(_difftest.DiffTestState_l2tlb_get, _difftest.DiffTestState_l2tlb_set)
    load = property(_difftest.DiffTestState_load_get, _difftest.DiffTestState_load_set)
    lrsc = property(_difftest.DiffTestState_lrsc_get, _difftest.DiffTestState_lrsc_set)
    mhpmevent_overflow = property(_difftest.DiffTestState_mhpmevent_overflow_get, _difftest.DiffTestState_mhpmevent_overflow_set)
    non_reg_interrupt_pending = property(_difftest.DiffTestState_non_reg_interrupt_pending_get, _difftest.DiffTestState_non_reg_interrupt_pending_set)
    refill = property(_difftest.DiffTestState_refill_get, _difftest.DiffTestState_refill_set)
    sbuffer = property(_difftest.DiffTestState_sbuffer_get, _difftest.DiffTestState_sbuffer_set)
    store = property(_difftest.DiffTestState_store_get, _difftest.DiffTestState_store_set)
    sync_aia = property(_difftest.DiffTestState_sync_aia_get, _difftest.DiffTestState_sync_aia_set)
    sync_custom_mflushpwr = property(_difftest.DiffTestState_sync_custom_mflushpwr_get, _difftest.DiffTestState_sync_custom_mflushpwr_set)
    trap = property(_difftest.DiffTestState_trap_get, _difftest.DiffTestState_trap_set)
    triggercsr = property(_difftest.DiffTestState_triggercsr_get, _difftest.DiffTestState_triggercsr_set)
    uncache_mm_store = property(_difftest.DiffTestState_uncache_mm_store_get, _difftest.DiffTestState_uncache_mm_store_set)
    wb_v0 = property(_difftest.DiffTestState_wb_v0_get, _difftest.DiffTestState_wb_v0_set)
    wb_vec = property(_difftest.DiffTestState_wb_vec_get, _difftest.DiffTestState_wb_vec_set)

    def get_wb_fp(self, index):
        return _difftest.DiffTestState_get_wb_fp(self, index)

    def get_commit(self, index):
        return _difftest.DiffTestState_get_commit(self, index)

    def get_wb_int(self, index):
        return _difftest.DiffTestState_get_wb_int(self, index)

    def get_l1tlb(self, index):
        return _difftest.DiffTestState_get_l1tlb(self, index)

    def get_l2tlb(self, index):
        return _difftest.DiffTestState_get_l2tlb(self, index)

    def get_load(self, index):
        return _difftest.DiffTestState_get_load(self, index)

    def get_refill(self, index):
        return _difftest.DiffTestState_get_refill(self, index)

    def get_sbuffer(self, index):
        return _difftest.DiffTestState_get_sbuffer(self, index)

    def get_store(self, index):
        return _difftest.DiffTestState_get_store(self, index)

    def get_uncache_mm_store(self, index):
        return _difftest.DiffTestState_get_uncache_mm_store(self, index)

    def get_wb_v0(self, index):
        return _difftest.DiffTestState_get_wb_v0(self, index)

    def get_wb_vec(self, index):
        return _difftest.DiffTestState_get_wb_vec(self, index)

    def __init__(self):
        _difftest.DiffTestState_swiginit(self, _difftest.new_DiffTestState())
    __swig_destroy__ = _difftest.delete_DiffTestState

# Register DiffTestState in _difftest:
_difftest.DiffTestState_swigregister(DiffTestState)
class DiffStateBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _difftest.delete_DiffStateBuffer

    def get(self, zone, index):
        return _difftest.DiffStateBuffer_get(self, zone, index)

    def next(self):
        return _difftest.DiffStateBuffer_next(self)

    def switch_zone(self):
        return _difftest.DiffStateBuffer_switch_zone(self)

# Register DiffStateBuffer in _difftest:
_difftest.DiffStateBuffer_swigregister(DiffStateBuffer)

def diffstate_buffer_init():
    return _difftest.diffstate_buffer_init()

def diffstate_buffer_free():
    return _difftest.diffstate_buffer_free()
REF_TO_DUT = _difftest.REF_TO_DUT
DUT_TO_REF = _difftest.DUT_TO_REF
class RefProxyConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ignore_illegal_mem_access = property(_difftest.RefProxyConfig_ignore_illegal_mem_access_get, _difftest.RefProxyConfig_ignore_illegal_mem_access_set)
    debug_difftest = property(_difftest.RefProxyConfig_debug_difftest_get, _difftest.RefProxyConfig_debug_difftest_set)
    enable_store_log = property(_difftest.RefProxyConfig_enable_store_log_get, _difftest.RefProxyConfig_enable_store_log_set)

    def __init__(self):
        _difftest.RefProxyConfig_swiginit(self, _difftest.new_RefProxyConfig())
    __swig_destroy__ = _difftest.delete_RefProxyConfig

# Register RefProxyConfig in _difftest:
_difftest.RefProxyConfig_swigregister(RefProxyConfig)
class AbstractRefProxy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ref_init = property(_difftest.AbstractRefProxy_ref_init_get, _difftest.AbstractRefProxy_ref_init_set)
    ref_regcpy = property(_difftest.AbstractRefProxy_ref_regcpy_get, _difftest.AbstractRefProxy_ref_regcpy_set)
    ref_csrcpy = property(_difftest.AbstractRefProxy_ref_csrcpy_get, _difftest.AbstractRefProxy_ref_csrcpy_set)
    ref_memcpy = property(_difftest.AbstractRefProxy_ref_memcpy_get, _difftest.AbstractRefProxy_ref_memcpy_set)
    ref_exec = property(_difftest.AbstractRefProxy_ref_exec_get, _difftest.AbstractRefProxy_ref_exec_set)
    ref_reg_display = property(_difftest.AbstractRefProxy_ref_reg_display_get, _difftest.AbstractRefProxy_ref_reg_display_set)
    update_config = property(_difftest.AbstractRefProxy_update_config_get, _difftest.AbstractRefProxy_update_config_set)
    uarchstatus_sync = property(_difftest.AbstractRefProxy_uarchstatus_sync_get, _difftest.AbstractRefProxy_uarchstatus_sync_set)
    store_commit = property(_difftest.AbstractRefProxy_store_commit_get, _difftest.AbstractRefProxy_store_commit_set)
    raise_intr = property(_difftest.AbstractRefProxy_raise_intr_get, _difftest.AbstractRefProxy_raise_intr_set)

    def __init__(self, coreid, ram_size, env, file_path):
        _difftest.AbstractRefProxy_swiginit(self, _difftest.new_AbstractRefProxy(coreid, ram_size, env, file_path))
    __swig_destroy__ = _difftest.delete_AbstractRefProxy

# Register AbstractRefProxy in _difftest:
_difftest.AbstractRefProxy_swigregister(AbstractRefProxy)
class RefProxy(AbstractRefProxy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _difftest.RefProxy_swiginit(self, _difftest.new_RefProxy(*args))
    __swig_destroy__ = _difftest.delete_RefProxy
    regs_int = property(_difftest.RefProxy_regs_int_get, _difftest.RefProxy_regs_int_set)
    regs_fp = property(_difftest.RefProxy_regs_fp_get, _difftest.RefProxy_regs_fp_set)
    csr = property(_difftest.RefProxy_csr_get, _difftest.RefProxy_csr_set)
    pc = property(_difftest.RefProxy_pc_get, _difftest.RefProxy_pc_set)
    hcsr = property(_difftest.RefProxy_hcsr_get, _difftest.RefProxy_hcsr_set)
    regs_vec = property(_difftest.RefProxy_regs_vec_get, _difftest.RefProxy_regs_vec_set)
    vcsr = property(_difftest.RefProxy_vcsr_get, _difftest.RefProxy_vcsr_set)
    fcsr = property(_difftest.RefProxy_fcsr_get, _difftest.RefProxy_fcsr_set)
    triggercsr = property(_difftest.RefProxy_triggercsr_get, _difftest.RefProxy_triggercsr_set)

    def arch_reg(self, src, is_fp=False):
        return _difftest.RefProxy_arch_reg(self, src, is_fp)

    def arch_vecreg(self, src):
        return _difftest.RefProxy_arch_vecreg(self, src)

    def sync(self, is_from_dut=False):
        return _difftest.RefProxy_sync(self, is_from_dut)

    def regcpy(self, dut):
        return _difftest.RefProxy_regcpy(self, dut)

    def compare(self, dut):
        return _difftest.RefProxy_compare(self, dut)

    def display(self, dut=None):
        return _difftest.RefProxy_display(self, dut)

    def skip_one(self, isRVC, rfwen, fpwen, vecwen, wdest, wdata):
        return _difftest.RefProxy_skip_one(self, isRVC, rfwen, fpwen, vecwen, wdest, wdata)

    def trigger_nmi(self, hasNMI):
        return _difftest.RefProxy_trigger_nmi(self, hasNMI)

    def virtual_interrupt_is_hvictl_inject(self, virtualInterruptIsHvictlInject):
        return _difftest.RefProxy_virtual_interrupt_is_hvictl_inject(self, virtualInterruptIsHvictlInject)

    def intr_delegate(self, intrDeleg):
        return _difftest.RefProxy_intr_delegate(self, intrDeleg)

    def non_reg_interrupt_pending(self, ip):
        return _difftest.RefProxy_non_reg_interrupt_pending(self, ip)

    def mhpmevent_overflow(self, mhpmeventOverflow):
        return _difftest.RefProxy_mhpmevent_overflow(self, mhpmeventOverflow)

    def raise_critical_error(self):
        return _difftest.RefProxy_raise_critical_error(self)

    def sync_aia(self, src):
        return _difftest.RefProxy_sync_aia(self, src)

    def sync_custom_mflushpwr(self, l2FlushDone):
        return _difftest.RefProxy_sync_custom_mflushpwr(self, l2FlushDone)

    def check_ref_vec_load_goldenmem(self):
        return _difftest.RefProxy_check_ref_vec_load_goldenmem(self)

    def get_ref_vdNum(self):
        return _difftest.RefProxy_get_ref_vdNum(self)

    def get_vec_goldenmem_reg(self):
        return _difftest.RefProxy_get_vec_goldenmem_reg(self)

    def vec_update_goldenmem(self):
        return _difftest.RefProxy_vec_update_goldenmem(self)

    def guided_exec(self, guide):
        return _difftest.RefProxy_guided_exec(self, guide)

    def in_disambiguation_state(self):
        return _difftest.RefProxy_in_disambiguation_state(self)

    def set_debug(self, enabled=False):
        return _difftest.RefProxy_set_debug(self, enabled)

    def set_illegal_mem_access(self, ignored=False):
        return _difftest.RefProxy_set_illegal_mem_access(self, ignored)

    def mem_init(self, dest, src, n, direction):
        return _difftest.RefProxy_mem_init(self, dest, src, n, direction)

    def flash_init(self, flash_base, size, flash_bin):
        return _difftest.RefProxy_flash_init(self, flash_base, size, flash_bin)

    def get_store_event_other_info(self, info):
        return _difftest.RefProxy_get_store_event_other_info(self, info)

    def get_reg_size(self):
        return _difftest.RefProxy_get_reg_size(self)

    def get_status(self):
        return _difftest.RefProxy_get_status(self)

# Register RefProxy in _difftest:
_difftest.RefProxy_swigregister(RefProxy)
class NemuProxy(RefProxy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, coreid, ram_size=0):
        _difftest.NemuProxy_swiginit(self, _difftest.new_NemuProxy(coreid, ram_size))
    __swig_destroy__ = _difftest.delete_NemuProxy

# Register NemuProxy in _difftest:
_difftest.NemuProxy_swigregister(NemuProxy)
class SpikeProxy(RefProxy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, coreid, ram_size=0):
        _difftest.SpikeProxy_swiginit(self, _difftest.new_SpikeProxy(coreid, ram_size))
    __swig_destroy__ = _difftest.delete_SpikeProxy

# Register SpikeProxy in _difftest:
_difftest.SpikeProxy_swigregister(SpikeProxy)
class LinkedProxy(RefProxy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, coreid, ram_size=0):
        _difftest.LinkedProxy_swiginit(self, _difftest.new_LinkedProxy(coreid, ram_size))
    __swig_destroy__ = _difftest.delete_LinkedProxy

# Register LinkedProxy in _difftest:
_difftest.LinkedProxy_swigregister(LinkedProxy)
class SyncState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sc_fail = property(_difftest.SyncState_sc_fail_get, _difftest.SyncState_sc_fail_set)

    def __init__(self):
        _difftest.SyncState_swiginit(self, _difftest.new_SyncState())
    __swig_destroy__ = _difftest.delete_SyncState

# Register SyncState in _difftest:
_difftest.SyncState_swigregister(SyncState)
class ExecutionGuide(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    force_raise_exception = property(_difftest.ExecutionGuide_force_raise_exception_get, _difftest.ExecutionGuide_force_raise_exception_set)
    exception_num = property(_difftest.ExecutionGuide_exception_num_get, _difftest.ExecutionGuide_exception_num_set)
    mtval = property(_difftest.ExecutionGuide_mtval_get, _difftest.ExecutionGuide_mtval_set)
    stval = property(_difftest.ExecutionGuide_stval_get, _difftest.ExecutionGuide_stval_set)
    mtval2 = property(_difftest.ExecutionGuide_mtval2_get, _difftest.ExecutionGuide_mtval2_set)
    htval = property(_difftest.ExecutionGuide_htval_get, _difftest.ExecutionGuide_htval_set)
    vstval = property(_difftest.ExecutionGuide_vstval_get, _difftest.ExecutionGuide_vstval_set)
    force_set_jump_target = property(_difftest.ExecutionGuide_force_set_jump_target_get, _difftest.ExecutionGuide_force_set_jump_target_set)
    jump_target = property(_difftest.ExecutionGuide_jump_target_get, _difftest.ExecutionGuide_jump_target_set)

    def __init__(self):
        _difftest.ExecutionGuide_swiginit(self, _difftest.new_ExecutionGuide())
    __swig_destroy__ = _difftest.delete_ExecutionGuide

# Register ExecutionGuide in _difftest:
_difftest.ExecutionGuide_swigregister(ExecutionGuide)
class NonRegInterruptPending(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    platformIRPMeip = property(_difftest.NonRegInterruptPending_platformIRPMeip_get, _difftest.NonRegInterruptPending_platformIRPMeip_set)
    platformIRPMtip = property(_difftest.NonRegInterruptPending_platformIRPMtip_get, _difftest.NonRegInterruptPending_platformIRPMtip_set)
    platformIRPMsip = property(_difftest.NonRegInterruptPending_platformIRPMsip_get, _difftest.NonRegInterruptPending_platformIRPMsip_set)
    platformIRPSeip = property(_difftest.NonRegInterruptPending_platformIRPSeip_get, _difftest.NonRegInterruptPending_platformIRPSeip_set)
    platformIRPStip = property(_difftest.NonRegInterruptPending_platformIRPStip_get, _difftest.NonRegInterruptPending_platformIRPStip_set)
    platformIRPVseip = property(_difftest.NonRegInterruptPending_platformIRPVseip_get, _difftest.NonRegInterruptPending_platformIRPVseip_set)
    platformIRPVstip = property(_difftest.NonRegInterruptPending_platformIRPVstip_get, _difftest.NonRegInterruptPending_platformIRPVstip_set)
    fromAIAMeip = property(_difftest.NonRegInterruptPending_fromAIAMeip_get, _difftest.NonRegInterruptPending_fromAIAMeip_set)
    fromAIASeip = property(_difftest.NonRegInterruptPending_fromAIASeip_get, _difftest.NonRegInterruptPending_fromAIASeip_set)
    localCounterOverflowInterruptReq = property(_difftest.NonRegInterruptPending_localCounterOverflowInterruptReq_get, _difftest.NonRegInterruptPending_localCounterOverflowInterruptReq_set)

    def __init__(self):
        _difftest.NonRegInterruptPending_swiginit(self, _difftest.new_NonRegInterruptPending())
    __swig_destroy__ = _difftest.delete_NonRegInterruptPending

# Register NonRegInterruptPending in _difftest:
_difftest.NonRegInterruptPending_swigregister(NonRegInterruptPending)
class FromAIA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mtopei = property(_difftest.FromAIA_mtopei_get, _difftest.FromAIA_mtopei_set)
    stopei = property(_difftest.FromAIA_stopei_get, _difftest.FromAIA_stopei_set)
    vstopei = property(_difftest.FromAIA_vstopei_get, _difftest.FromAIA_vstopei_set)
    hgeip = property(_difftest.FromAIA_hgeip_get, _difftest.FromAIA_hgeip_set)

    def __init__(self):
        _difftest.FromAIA_swiginit(self, _difftest.new_FromAIA())
    __swig_destroy__ = _difftest.delete_FromAIA

# Register FromAIA in _difftest:
_difftest.FromAIA_swigregister(FromAIA)
class InterruptDelegate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    irToHS = property(_difftest.InterruptDelegate_irToHS_get, _difftest.InterruptDelegate_irToHS_set)
    irToVS = property(_difftest.InterruptDelegate_irToVS_get, _difftest.InterruptDelegate_irToVS_set)

    def __init__(self):
        _difftest.InterruptDelegate_swiginit(self, _difftest.new_InterruptDelegate())
    __swig_destroy__ = _difftest.delete_InterruptDelegate

# Register InterruptDelegate in _difftest:
_difftest.InterruptDelegate_swigregister(InterruptDelegate)

